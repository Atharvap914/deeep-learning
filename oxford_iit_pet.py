# -*- coding: utf-8 -*-
"""intel_data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jU6p0ZDYmF6RZpV53ku4TsTTPxU4ZVFz
"""

!pip install -q tensorflow-datasets

import tensorflow_datasets as tfds
import numpy as np
from sklearn.decomposition import PCA
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score
from tensorflow.keras.applications import VGG16, ResNet50
from tensorflow.keras.applications.vgg16 import preprocess_input as p_vgg
from tensorflow.keras.applications.resnet50 import preprocess_input as p_resnet
from tensorflow.keras.models import Model
import tensorflow as tf

ds, info = tfds.load('oxford_iiit_pet:4.*.*',
                     split=['train', 'test'], with_info=True, as_supervised=True)

train_ds, test_ds = ds

num_classes = info.features['label'].num_classes
print("Classes:", num_classes)

def ds_to_numpy(ds, limit=2000):
    X, y = [], []
    for img, lbl in tfds.as_numpy(ds.take(limit)):
        img = np.array(tf.image.resize(img, (224,224)))
        X.append(img); y.append(lbl)
    return np.array(X), np.array(y)

X_train, y_train = ds_to_numpy(train_ds, limit=3000)
X_test, y_test = ds_to_numpy(test_ds, limit=1000)

vgg = VGG16(weights='imagenet', include_top=False, input_shape=(224,224,3))
res = ResNet50(weights='imagenet', include_top=False, input_shape=(224,224,3))
vgg_m = Model(vgg.input, vgg.output)
res_m = Model(res.input, res.output)

fv_train = vgg_m.predict(p_vgg(X_train), batch_size=32, verbose=1)
fr_train = res_m.predict(p_resnet(X_train), batch_size=32, verbose=1)
fv_test = vgg_m.predict(p_vgg(X_test), batch_size=32, verbose=1)
fr_test = res_m.predict(p_resnet(X_test), batch_size=32, verbose=1)

Xtr = np.concatenate([fv_train.reshape(len(fv_train), -1),
                      fr_train.reshape(len(fr_train), -1)], axis=1)
Xte = np.concatenate([fv_test.reshape(len(fv_test), -1),
                      fr_test.reshape(len(fr_test), -1)], axis=1)

pca = PCA(n_components=300, random_state=42)
Xtr_p = pca.fit_transform(Xtr)
Xte_p = pca.transform(Xte)

clf = XGBClassifier(
    n_estimators=100, max_depth=6, learning_rate=0.1,
    objective='multi:softmax', num_class=num_classes,
    eval_metric='mlogloss', use_label_encoder=False,
    random_state=42)

clf.fit(Xtr_p, y_train)

y_pred = clf.predict(Xte_p)
print("Accuracy:", accuracy_score(y_test, y_pred))







