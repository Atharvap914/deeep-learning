# -*- coding: utf-8 -*-
"""weather_forecasting.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZcYHaZgl5lAAhfnOtkDusGa4roC18xEE
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM, Conv1D, MaxPooling1D, Dropout,Bidirectional
from tensorflow.keras.callbacks import EarlyStopping

!wget https://storage.googleapis.com/tensorflow/tf-keras-datasets/jena_climate_2009_2016.csv.zip
!unzip jena_climate_2009_2016.csv.zip

df = pd.read_csv("jena_climate_2009_2016.csv")

df

df.shape

df = df[['T (degC)', 'p (mbar)', 'rho (g/m**3)']]

df

df = df.dropna()

df

scaler = MinMaxScaler()

scaled_data = scaler.fit_transform(df)

def create_sequences(data, window_size):
    X, y = [], []
    for i in range(len(data) - window_size):
        X.append(data[i:i+window_size])
        y.append(data[i+window_size][0])  # Temperature prediction
    return np.array(X), np.array(y)

window_size = 24

X, y = create_sequences(scaled_data, window_size)

split_index = int(len(X) * 0.8)

X_train, X_test = X[:split_index], X[split_index:]
y_train, y_test = y[:split_index], y[split_index:]

model = Sequential()
model.add(Conv1D(filters=64, kernel_size=3, activation='relu', input_shape=(X_train.shape[1], X_train.shape[2])))
model.add(MaxPooling1D(pool_size=2))
model.add(Bidirectional(LSTM(units=64, return_sequences=False)))
model.add(Dropout(0.2))
model.add(Dense(units=1))
model.compile(optimizer='adam', loss='mse')

model.summary()

early_stop = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)
history = model.fit(X_train, y_train, epochs=20, batch_size=32,
                    validation_split=0.2, callbacks=[early_stop], verbose=1)

loss = model.evaluate(X_test, y_test, verbose=0)
print(f'Test Loss: {loss}')

predictions = model.predict(X_test)

display(predictions)



actual_temp = scaler.inverse_transform(np.concatenate((y_test.reshape(-1, 1), np.zeros((len(y_test), df.shape[1]-1))), axis=1))[:, 0]
predicted_temp = scaler.inverse_transform(np.concatenate((predictions, np.zeros((len(predictions), df.shape[1]-1))), axis=1))[:, 0]

plt.figure(figsize=(14, 7))
plt.plot(actual_temp, label='Actual Temperature')
plt.plot(predicted_temp, label='Predicted Temperature')
plt.title('Actual vs Predicted Temperature')
plt.xlabel('Time Steps')
plt.ylabel('Temperature (degC)')
plt.legend()
plt.show()



plt.figure(figsize=(12, 6))
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Training and Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss (MSE)')
plt.legend()
plt.show()

